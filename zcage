#!/usr/bin/env node --abort_on_uncaught_exception

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. 
 *
 * Copyright (c) 2018, Carlos Neira cneirabustos@gmail.com 
 */


const zone = require('./lib/zonelib');
const img = require('./lib/imageadm');
const commandLineArgs = require('command-line-args');
const commandLineUsage = require('command-line-usage');
var os = require('os');
var fs = require('fs');

const ZCAGE_VERSION = '1.4.5';

let mainDefinitions = [{
    name: 'name',
    defaultOption: true
}];
const mainCommand = commandLineArgs(mainDefinitions, {
    stopAtFirstUnknown: true
});
let argv = mainCommand._unknown || [];

if ((os.type() != 'SunOS')) {
    console.log(
	'Kid, get yerself a System  https://wiki.illumos.org/display/illumos/Distributions'
    );
    return null;
}

switch (mainCommand.name) {

case "create":
    const createDefinitions = [
	{
	    name: 'alias'
	},
	{
	    name: 'brand',
	    defaultValue: "sparse"
	},
	{
	    name: 'net'
	},
	{
	    name: 'autoboot',
	    type: Boolean
	},
	{
	    name: "ram",
	    defaultValue: '1gb'
	},
	{
	    name: "with-image"
	},
	{
	    name: "fs-allowed"
	},
	{
	    name: "limitpriv"
	},
	{
	    name: "disk"
	},
	{
	    name: "hostbridge"
	},
	{
	    name: "cpu"
	},
	{
	    name: "quota",
	    defaultValue: "10G"
	},
	{
	    name: "cdrom"
	},
	{
	    name: "debug",
	    defaultValue: false,
	    type: Boolean
	},
	{
	    name: "docker"
	},
	{
	    name: "udata"
	},
    ];
    const createOptions = commandLineArgs(createDefinitions, {
	argv,
	stopAtFirstUnknown: true
    });
    argv = createOptions._unknown || [];

    if (createOptions.net == undefined) {
	help();
	return;
    }
    if (img.Isactivated() == 0) {
	zone.build(createOptions);
    }

    break;

case "destroy":
    const destroyDefinitions = [{
	name: 'zonename',
	alias: 'z'
    }];
    const destroyOptions = commandLineArgs(destroyDefinitions, {
	argv,
	stopAtFirstUnknown: true
    });
    argv = destroyOptions._unknown || [];

    if ("zonename" in destroyOptions && (destroyOptions.zonename != null)) {
	zone.destroy(destroyOptions.zonename);
    } else {
	console.log("need zone name to destroy");
    }
    break;

case "list":

    const listDefinitions = [
	{
	    name: 'state',
	}];
    const listOptions = commandLineArgs(listDefinitions, {
	argv,
	stopAtFirstUnknown: true
    });

    argv = listOptions._unknown || [];

    zone.listzones(listOptions);
    break;

case "start":

    const startDefinitions = [
	{
	    name: 'zonename',
	    alias: 'z'
	},
	{
	    name: 'with-iso'
	}
    ];
    const startOptions = commandLineArgs(startDefinitions, {
	argv,
	stopAtFirstUnknown: true
    });
    argv = startOptions._unknown || [];

    if (("with-iso" in startOptions) && !(fs.existsSync(startOptions['with-iso']))) {
	console.log("Error:" + startOptions['with-iso'] + ": does not exists.");
	return;
    }

    if (("zonename" in startOptions) && !("with-iso" in startOptions)) {
	zone.start(startOptions.zonename);
    } else if (("zonename" in startOptions) && ("with-iso" in startOptions)) {
	zone.start(startOptions.zonename, startOptions['with-iso']);
    } else {
	console.log("need zone alias or uuid to start");
    }
    break;

case "stop":

    const stopDefinitions = [
	{
	    name: 'zonename',
	    alias: 'z'
	}];
    const stopOptions = commandLineArgs(stopDefinitions, {
	argv,
	stopAtFirstUnknown: true
    });
    argv = stopOptions._unknown || [];

    if ("zonename" in stopOptions && (stopOptions.zonename != null)) {
	zone.halt(stopOptions.zonename);
    } else {
	console.log("need zone alias or uuid to stop");
    }
    break;

case "reboot":

    const rebootDefinitions = [{
	name: 'zonename',
	alias: 'z'
    }];
    const rebootOptions = commandLineArgs(rebootDefinitions, {
	argv,
	stopAtFirstUnknown: true
    });
    argv = rebootOptions._unknown || [];

    if (("zonename" in rebootOptions) && (rebootOptions.zonename != null)) {
	zone.reboot(rebootOptions.zonename);
    } else {
	console.log("need zone alias or uuid to reboot");
    }
    break;


case "update":

    const rctlDefinitions = [
	{
	    name: 'zonename',
	    alias: 'z'
	},
	{
	    name: "ram"
	},
	{
	    name: "cpu-shares"
	},
	{
	    name: "dedicated-cpu"
	},
	{
	    name: "dedicated-cpu-importance"
	},
	{
	    name: "max-lwps"
	},
	{
	    name: "autoboot",
	    type: Boolean
	},
	{
	    name: "quota"
	}
    ];
    const rctlOptions = commandLineArgs(rctlDefinitions, {
	argv,
	stopAtFirstUnknown: true
    });
    argv = rctlOptions._unknown || [];

    if ("zonename" in rctlOptions && (rctlOptions.zonename != null)) {
	zone.rctl(rctlOptions.zonename, rctlOptions);
    } else {
	console.log("need zone alias or uuid  to update");
    }
    break;

case "info":

    const getDefinitions = [
	{
	    name: 'zonename',
	    alias: 'z'
	}];
    const getOptions = commandLineArgs(getDefinitions, {
	argv,
	stopAtFirstUnknown: true
    });
    argv = getOptions._unknown || [];

    if ("zonename" in getOptions && (getOptions.zonename != null)) {
	zone.getzonedata(getOptions.zonename);
    } else {
	console.log("missing zone alias or uuid ");
    }
    break;


case "version":
    console.log(ZCAGE_VERSION);
    break;

case "activate":
    if (img.Isactivated() != 0) {
	img.ActivateZcage();
    } else {
	console.log("zcage is already activated, you should be able to create zones.");
    }
    break;

case "images":
    const listimgDefinitions = [
	{
	    name: 'os'
	},
	{
	    name: 'version'
	},
	{
	    name: 'name'
	},
	{
	    name: 'uuid'
	},
	{
	    name: 'list',
	    alias: 'l'
	}
    ];
    const listimgOptions = commandLineArgs(listimgDefinitions, {
	argv,
	stopAtFirstUnknown: true
    });
    argv = listimgOptions._unknown || [];

    if (img.Isactivated() == 0) {
	if (listimgOptions.list) {
	    switch (listimgOptions.list) {
	    case 'local':
		img.list_avail();
		break;

	    case 'joyent':
		img.list_images();
		break;

	    case 'proxmox':
		if (img.list_datasource('proxmox') == null)
		    help('images');
		break;

	    case 'docker':
		if (listimgOptions._unknown)
		    img.docker_list(listimgOptions._unknown[0]);
		else
		    console.log("Usage: --docker <library> for ex: --docker ubuntu");
		break;

	    case 'cloud-init':
		if (listimgOptions._unknown) {
		    if (img.list_datasource('cloud-init', listimgOptions._unknown[0]) == null)
			help('images');
		} else {
		    console.log(
			"Usage: --cloud-init <ubuntu|fedora|centos>/<version> for ex: --cloud-init ubuntu/bionic"
		    );
		}
		break;
	    }
	} else {
	    console.log(
		"You need to specify to list remote or local images or from docker hub for example :\n \
zcage images --list (local | joyent | proxmox | docker <ubuntu, alpine, centos..>)"
	    );
	}
    }
    break;


case "pull":
    const pullDefinitions = [
	{
	    name: 'image'
	},
	{
	    name: 'provider'
	}
    ];
    const pullOptions = commandLineArgs(pullDefinitions, {
	argv,
	stopAtFirstUnknown: true
    });
    argv = pullOptions._unknown || [];
    if (img.Isactivated() == 0) {
	if (pullOptions.provider == 'cloud-init' && pullOptions.image) {
	    if (pullOptions._unknown)
		img.fetch_by_provider('cloud-init', pullOptions._unknown[0],
				      pullOptions.image);
	    else
		console.log("Usage: --provider cloud-init centos  for ex: --docker ubuntu");
	    break;
	} else
	    if (pullOptions.image)
		img.getzss(pullOptions.image, pullOptions.provider);
	else
	    console.log("specify image to pull --image uuid ");
    } else {
	console.log(
	    "zcage must be activated to be able to pull images : zcage activate "
	);
    }
    break;

case "help":
    const helpDefinitions = [
	{
	    name: 'notused'
	}];
    const helpOptions = commandLineArgs(helpDefinitions, {
	argv,
	stopAtFirstUnknown: true
    });
    argv = helpOptions._unknown || [];

    if (helpOptions._unknown)
	help(helpOptions._unknown[0]);
    else
	help("full");
    break;

case "fetch":
    const fetchDefinitions = [{
	name: 'notused'
    }];
    const fetchOptions = commandLineArgs(fetchDefinitions, {
	argv,
	stopAtFirstUnknown: true
    });
    argv = fetchOptions._unknown || [];

    if (fetchOptions._unknown)
	img.fetch(fetchOptions._unknown[0]);
    else
	help("fetch");
    break;

default:
    if (mainCommand.name)
	console.log("zcage:\n unknown subcommand '" + mainCommand.name + "'");
    help();
}

function help(helpOptions) {
    switch (helpOptions) {
    case 'version':
	console.log('\nversion: Returns current version of zcage\n');
	break;
    case 'create':
	console.log('\ncreate:\n' +
		    '    --net:         Configures network ex: --net="vnic|zoneip/netmask|gateway".\n\n' +
		    '    --ram :        Maximum memory allowed ex: 2gb|2048mb.\n\n' +
		    '    --with-image:  Image uuid to use (lx only)\n\n' +
		    '    --alias:       Names a zone\n\n' +
		    '    --brand:       Specifies brand for the zone\n\n' +
		    '    --disk:        Uses zfs volume as disk (bhyve and kvm only)\n\n' +
		    '    --fs-allowed:  Allows file system mounts other than the default for ex: --fs-allowed=ufs\n\n' +
		    '    --limitpriv:   Adds privileges to a zone,for ex:--limitpriv="default,dtrace_user,dtrace_proc".\n\n' +
		    '    --cpu:         Number of cpus the vm will use (bhyve and kvm only).\n\n' +
		    '    --hostbridge:  Hostbridge presented to the guest(bhyve and kvm only).\n\n' +
		    '    --autoboot:    Zone will be started at startup, default: false.\n\n' +
		    '    --docker:      Docker hub v2 image to use (lx only) for ex: ubuntu/latest.\n\n'
		   );
	break;
    case 'start':
	console.log(
	    '\nstart:\n\n    -z :       Starts a zone by name or UUID\n' +
		'    -with-iso: Starts zone using iso image (bhyve and kvm only)\n\n');
	break;
    case 'stop':
	console.log(
	    '\nstop:\n\n    -z <container name or UUID>: Stops the running zone\n\n');
	break;
    case 'info':
	console.log(
	    '\ninfo:\n\n    -z <container name or UUID>: Returns information for the zone.\n\n'
	);
	break;

    case 'destroy':
	console.log(
	    '\ndestroy:\n\n    -z <container name or UUID>: Destroys the zone, cannot be undone.\n\n'
	);
	break;
    case 'pull':
	console.log(
	    '\npull:\n\n    --image <uuid> :  Retrieves image using uuid and stores for later usage.\n\n\n'
	);
	break;
    case 'reboot':
	console.log(
	    '\nreboot:\n    -z <uuid or alias> :  Restarts the zone.\n\n\n'
	);
	break;

    case 'images':
	console.log(
	    '\nimages:\n\n   --list  avail|local|joyent|proxmox|docker <library>|cloud-init <distro/version> : Displays available images in remote host or locally available\n'
	);
	break;

    case 'update':
	console.log(
	    'update:\n\t-z  <uuid or alias> : zone to update\n' +
		'\n\nflags:\n' +
		'    --ram:        Updates maximum of allowed ram for ex: 2gb or 2048mb\n\n' +
		'    --cpu-shares: Updates the zone cpu-shares for ex: 3000\n\n' +
		'    --max-lwps:   Updates the maximum amont of lwps default value is 3000 \n\n' +
		'    --autoboot:   Updates the zone cpu-shares values are true or false\n\n' +
		'    --quota:      Updates disk quota \n\n'
	);
	break;
    case 'fetch':
	console.log('fetch <url> : Download image from url for later use ');
	break;
    default:
	console.log('\nOptions:');
	console.log('-----------------------');
	console.log(
	    'create:\t Creates a zone.\nstart:\t Starts a zone\nstop:\t Stops a zone\nimages:\t List available images\npull:\t Download images\ndestroy: Destroys a zone\nupdate:\t Updates zone resources\nversion: Prints zcage version\nfetch:\t Downloads an image from url for later use (lx,bhyve and kvm brands)\n'
	);
	console.log('For help on a specific command type zcage help <Option>\n');
	console.log(
	    'Examples:\n\nTo create a zone with 2gb of ram using with ip address/mask 192.168.1.225/24 and gateway 192.168.1.1:\n\n' +
		'# zcage create --net "vnic0|192.168.1.225/24|192.168.1.1" --ram 2gb' +
		"\n");

	break;
    }
}
